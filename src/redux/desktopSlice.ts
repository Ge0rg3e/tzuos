import { registredApplications } from '~/views/desktop/applications';
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

// Define the shape of an application object
export interface Application {
	id: string;
	icon: string;
	name: string;
	opened: boolean;
	tempData: {
		isFullScreen: boolean;
		height: number;
		width: number;
	};
	component: FixableAny;
}

// Define the state for the desktop, which holds the list of applications
export interface DesktopState {
	applications: Application[];
}

// Initialize the state with the registered applications from the desktop view
const initialState: DesktopState = {
	applications: registredApplications
};

// Create the slice for managing the desktop state, including reducers for application interactions
const desktopSlice = createSlice({
	name: 'desktop',
	initialState,
	reducers: {
		openApp: (state, action: PayloadAction<string>) => {
			// Find the application by its id
			const app = state.applications.find((app) => app.id === action.payload);
			// If the app is found, set it to open
			if (app) {
				app.opened = true;
			}
		},

		closeApp: (state, action: PayloadAction<string>) => {
			// Find the application by its id
			const app = state.applications.find((app) => app.id === action.payload);
			// If the app is found, set it to closed and reset fullscreen state
			if (app) {
				app.opened = false;
				app.tempData.isFullScreen = false;
			}
		},

		setAppTempData: (state, action: PayloadAction<{ id: string; updates: Partial<{ isFullScreen: boolean; width: number; height: number }> }>) => {
			// Find the application by its id
			const app = state.applications.find((app) => app.id === action.payload.id);
			// If the app is found, update its temporary data with the provided updates
			if (app) {
				// Iterate over the updates and apply them to the application's temporary data
				Object.entries(action.payload.updates).forEach(([key, value]) => {
					// Check if the key exists in the application's tempData, and apply the update
					if (key in app.tempData) {
						(app.tempData as ExpectedAny)[key] = value;
					}
				});
			}
		}
	}
});

// Export the actions generated by the slice to interact with the state
export const { openApp, closeApp, setAppTempData } = desktopSlice.actions;

// Export the reducer to be used in the Redux store
export default desktopSlice.reducer;
